generator client {
    provider = "prisma-client-js"
    output   = "./generated/client"
}

datasource db {
    provider = "postgresql"
    url      = env("POSTGRES_DB_CONNECTION_STRING")
}

model User {
    userId         String         @id @default(uuid())
    profilePicture String?
    email          String?        @unique
    username       String?
    createdAt      DateTime       @default(now())
    updatedAt      DateTime       @updatedAt
    deletedAt      DateTime?
    posts          Post[]
    comments       Comment[]
    like           Like[]
    accounts       OAuthAccount[]
}

model OAuthAccount {
    id             String    @id @default(uuid())
    provider       String // 'google', 'facebook'
    providerUserId String // e.g., Google/Discord ID
    userId         String
    expiresAt      DateTime?
    user           User      @relation(fields: [userId], references: [userId], onDelete: Cascade)

    @@unique([provider, providerUserId]) // ensures one account per provider-user combo
}

model Post {
    postId    String    @id @default(uuid())
    user      User      @relation(fields: [userId], references: [userId])
    userId    String
    title     String
    content   String    @db.Text
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
    comments  Comment[]
    likes     Like[]
}

model Comment {
    commentId       String    @id @default(uuid())
    user            User      @relation(fields: [userId], references: [userId])
    userId          String
    post            Post      @relation(fields: [postId], references: [postId])
    postId          String
    content         String    @db.Text
    parentComment   Comment?  @relation("commentsToComments", fields: [parentCommentId], references: [commentId])
    parentCommentId String?
    childComments   Comment[] @relation("commentsToComments")
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    deletedAt       DateTime?
    likes           Like[]
}

model Like {
    likeId    String    @id @default(uuid())
    user      User      @relation(fields: [userId], references: [userId])
    userId    String
    post      Post?     @relation(fields: [postId], references: [postId])
    postId    String?
    comment   Comment?  @relation(fields: [commentId], references: [commentId])
    commentId String?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    deletedAt DateTime?
}
